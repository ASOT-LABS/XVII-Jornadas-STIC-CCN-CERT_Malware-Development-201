#pragma once
#include <Windows.h>
#include <winternl.h>

#ifndef NtCurrentProcess
#define NtCurrentProcess() (reinterpret_cast<HANDLE>(-1))
#endif

typedef NTSTATUS(WINAPI* NtAllocateVirtualMemory_t)(
    HANDLE    ProcessHandle,
    PVOID* BaseAddress,
    ULONG_PTR ZeroBits,
    PSIZE_T   RegionSize,
    ULONG     AllocationType,
    ULONG     Protect
    );

typedef NTSTATUS(WINAPI* NtProtectVirtualMemory_t)(
    HANDLE    ProcessHandle,
    PVOID* BaseAddress,
    PSIZE_T   RegionSize,
    ULONG     NewProtect,
    PULONG    OldProtect
    );

typedef NTSTATUS(WINAPI* NtFreeVirtualMemory_t)(
    HANDLE    ProcessHandle,
    PVOID* BaseAddress,
    PSIZE_T   RegionSize,
    ULONG     FreeType
    );

typedef NTSTATUS(WINAPI* NtCreateThreadEx_t)(
    PHANDLE            ThreadHandle,
    ACCESS_MASK        DesiredAccess,
    LPVOID             ObjectAttributes,
    HANDLE             ProcessHandle,
    LPTHREAD_START_ROUTINE  StartAddress,
    LPVOID             Parameter,
    ULONG              CreateThreadFlags, // 0 for default
    SIZE_T             ZeroBits, // 0 for default
    SIZE_T             StackSize, // 0 for default
    SIZE_T             MaximumStackSize, // 0 for default
    PVOID              AttributeList // NULL for default
    );

typedef NTSTATUS(WINAPI* NtWaitForSingleObject_t)(
    HANDLE        ObjectHandle,
    BOOLEAN       Alertable,
    PLARGE_INTEGER Timeout
    );

typedef VOID(NTAPI* RtlCopyMemory_t)(
    _Out_       VOID UNALIGNED* Destination,
    _In_  const VOID UNALIGNED* Source,
    _In_        SIZE_T         Length
    );