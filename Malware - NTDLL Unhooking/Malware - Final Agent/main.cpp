#include <Windows.h>
#include "helpers.h"
#include "NTLibrary.h"

unsigned char syscallSignature[] = { 0x4c, 0x8b, 0xd1, 0xb8 }; // First bytes of every syscall

bool isHooked(PVOID pProc)
{
	for (int i = 0; i < sizeof(syscallSignature); i++)
	{
		if (((unsigned char*)pProc)[i] != syscallSignature[i]) return true;
	}

	return false;
}

bool findSSN(std::string procName, UINT32* p_ssn, UINT64* p_retAddress)
{
	HMODULE hNtdll = hlpGetModuleHandle("ntdll.dll");
	PVOID orig_pProc = hlpGetProcAddress(hNtdll, procName);
	PVOID pProc = orig_pProc;

	for (int i = 0; i < 20; i++)
	{
		pProc = (PVOID)((ULONGLONG)pProc - 0x20 * i); // syscalls are usually 0x20 bytes apart

		if (!isHooked(pProc))
		{
			*p_ssn = *((int*)((ULONGLONG)pProc + 4)) + i; // SSN are incremental
			*p_retAddress = (ULONGLONG)orig_pProc + 0x12; // Address to jmp in order to hide call stack
			return true;
		}
	}

	return false;
}



int main()
{
	// Define function pointers
	NtAllocateVirtualMemory_t NtAllocateVirtualMemory = reinterpret_cast<NtAllocateVirtualMemory_t>(&genericSyscall);

	SIZE_T allocSize = (SIZE_T)100;
	NTSTATUS status = NULL;
	PVOID pShellcode = NULL;

	// Execute syscall
	findSSN("NtAllocateVirtualMemory", &_ssn, &_retAddress); // Always set _ssn and _retAddress before calling the function
	status = NtAllocateVirtualMemory(NtCurrentProcess(), &pShellcode, 0, &allocSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	return 0;
}