from Crypto.Cipher import AES
import hashlib
import binascii

KEY = b'MySecretKey12345'

def pad(s):
    return s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size)

def aesenc(plaintext, key):
    key = hashlib.sha256(key).digest()
    iv = 16 * b'\x00'
    plaintext = pad(plaintext)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.encrypt(plaintext)

def aesdec(ciphertext, key):
    key = hashlib.sha256(key).digest()
    iv = 16 * b'\x00'
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = cipher.decrypt(ciphertext)
    # Remove PKCS7 padding
    pad_length = ord(decrypted[-1])
    return decrypted[:-pad_length]

# Example
plaintext = "WaitForSingleObject\x00"

ciphertext = aesenc(plaintext, KEY)
key_hex = binascii.hexlify(KEY)
payload_hex = binascii.hexlify(ciphertext)
print('AESkey[] = { ' + ', '.join('0x' + key_hex[i:i+2] for i in range(0, len(key_hex), 2)) + ' };')
print('payload[] = { ' + ', '.join('0x' + payload_hex[i:i+2] for i in range(0, len(payload_hex), 2)) + ' };')

decrypted = aesdec(ciphertext, KEY)
print("Decrypted:", decrypted)
